-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Intel and sold by Intel or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
-- Created on Tue Jul 25 14:35:57 2017

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

--  Entity Declaration

ENTITY block_adder IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		DIN_A : IN STD_LOGIC_VECTOR(3 downto 0);
		DIN_B : IN STD_LOGIC_VECTOR(3 downto 0);
		EN_L : IN STD_LOGIC;
		MCK : IN STD_LOGIC;
		DOUT : OUT STD_LOGIC_VECTOR(4 downto 0)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END block_adder;


--  Architecture Body

ARCHITECTURE block_adder_architecture OF block_adder IS
  signal DIN_Ax : STD_LOGIC_VECTOR(3 downto 0);
  signal DIN_Bx : STD_LOGIC_VECTOR(3 downto 0);
  signal DOUTx : STD_LOGIC_VECTOR(4 downto 0) := "00000";
  signal DIN_Ad : STD_LOGIC_VECTOR(3 downto 0) := "0000";
  signal DIN_Bd : STD_LOGIC_VECTOR(3 downto 0) := "0000";
  signal DOUTd : STD_LOGIC_VECTOR(4 downto 0) := "00000";

BEGIN
  DIN_Ax <= DIN_A;
  DIN_Bx <= DIN_B;
  DOUT <= DOUTx;
  DOUTx <= ('0' & DIN_Ax) + ('0' & DIN_Bx);
  process(MCK)
  begin
    if (EN_L = '0') then
      if (MCK'event and MCK = '0') then
        DIN_Ad <= DIN_Ax;
        DIN_Bd <= DIN_Bx;
		end if;
      if (MCK'event and MCK = '1') then
        DOUTd <= DOUTx;
		end if;
    end If;
  end process;
END block_adder_architecture;
